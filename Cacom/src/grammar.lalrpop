// The lexer and some of the grammar rules were inspired
// by Konrad Siek FML Language intepreter, thanks Konrad!
// https://github.com/kondziu

use crate::ast::{StmtType, Opcode, Expr};
use std::collections::VecDeque;
use std::str::FromStr;

grammar;

// Lexer
match {
    // Comments, those we ignore
    r"\s*" => { },
    r"/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/|(//.*)" => { },

    // keywords
    ";" => SEMICOLON,
    "{" => CURLYBOPEN,
    "}" => CURLYBCLOSE,
    "||" => OR,
    "&&" => AND,
    "==" => EQ,
    "!=" => NEQ,
    "="  => ASSIGN,
    ">"  => GREATER,
    "<"  => LESS,
    ">=" => GREATEREQ,
    "<=" => LESSEQ,
    "*"  => MULTIPLY,
    "/"  => DIVIDE,
    "%"  => MODULO,
    "+"  => PLUS,
    "-" => MINUS,
    "if" => IF,
    "else" => ELSE,
    "(" => LPAREN,
    ")" => RPAREN,
    "let" => LET,
    "in" => IN,
    "[" => RBRACKET,
    "]" => LBRACKET,
    "true" => TRUE,
    "false" => FALSE,
    "def" => DEF,
    "," => COMMA,
    "return" => RETURN,

    "val" => VAL,
    "var" => VAR,

    r"[_A-Za-z][_A-Za-z0-9]*" => IDENTIFIER,
    r"[0-9]+" => NUMBER,
    // TODO FLOATS
    r#""([^\\"]|\\[~ntr\\"])*""# => STRING_LITERAL,
}

pub TopLevel: StmtType = {
    TopLevelExpressions => StmtType::Top(<>),
                        => StmtType::Top(vec![StmtType::Expression(Expr::NoneVal)]),
}

TopLevelExpressions: Vec<StmtType> = SeparatedLeastOne<TopLevelExpression, SEMICOLON>;

TopLevelExpression: StmtType = {
    // FIXME: This permits 'return' in top level
    Statement => <>,
    FunDecl => <>,
}

// Those are 'top' level expression in block,
// do not put things that can appear in operations
// (ie. in binary operations, conditions and so on...)
// here belongs for example while or for cycle.
Statement: StmtType = {
    Expr => StmtType::Expression(<>), // All subexpressions - contains binaryop, ifs, calls and so on.
    Return => <>,
    VarDecl => <>,
    Assignment => <>,
}

Assignment: StmtType = {
    <name: Identifier> ASSIGN <value: Expr> => StmtType::AssignVariable { name, value }
}

VarDecl: StmtType = {
    VAL <name: Identifier> ASSIGN <value: Expr> => StmtType::Variable { name, mutable: false, value },
    VAR <name: Identifier> ASSIGN <value: Expr> => StmtType::Variable { name, mutable: true, value },
}

LeftAssoc<Op, NextLevel>: Expr = {
    <left: LeftAssoc<Op, NextLevel>> <op: Op> <right: NextLevel> => Expr::Operator{ op, arguments: vec![left, right] },
    NextLevel,
}

Unary<Op, NextLevel>: Expr = {
    <op: Op> <arg: Unary<Op, NextLevel>> => Expr::Operator{ op, arguments: vec![arg] },
    NextLevel,
}

Expr = LeftAssoc<LogicalOp, AExpr>;

LogicalOp: Opcode = {
    LESS => Opcode::Less,
    LESSEQ => Opcode::LessEq,
    GREATER => Opcode::Greater,
    GREATEREQ => Opcode::GreaterEq,
    EQ => Opcode::Eq,
    NEQ => Opcode::Neq,
}

AExpr = LeftAssoc<ExprOp, Factor>;

ExprOp: Opcode = {
    PLUS => Opcode::Add,
    MINUS => Opcode::Sub,
}

Factor = LeftAssoc<TermOp, Term>;

TermOp: Opcode = {
    MULTIPLY => Opcode::Mul,
    DIVIDE => Opcode::Div,
    MODULO => Opcode::Mod,
}

Term = Unary<UnaryOp, Primary>;

UnaryOp: Opcode = {
    MINUS => Opcode::Negate,
}

Primary: Expr = {
    TRUE => Expr::Bool(true),
    FALSE => Expr::Bool(false),
    Number => <>,
    String => Expr::String(<>),
    Call => <>,
    LPAREN <expr: Expr> RPAREN => expr,
    Block => <>,
    Conditional => <>,
    Identifier => Expr::AccessVariable{name: <>},
}

Call: Expr = {
    <function: Identifier> LPAREN <arguments: Arguments> RPAREN => {
        Expr::CallFunction{ name: function, arguments: arguments }
    }
    // TODO: Method calls over objects, lists, strings and so on.
}
Arguments = Separated<Expr, COMMA>;

Identifier: String = IDENTIFIER => <>.to_string();

Number: Expr = {
    NUMBER => Expr::Integer(i32::from_str(<>).unwrap()),
}

String: String = {
    <s:STRING_LITERAL> => s[1..s.len()-1].to_string(),
}

Block: Expr = {
    CURLYBOPEN <v: (<Statement> SEMICOLON)*> <e: Expr?> CURLYBCLOSE => match e {
        Some(expr) => Expr::Block(v, Box::new(expr)),
        None => Expr::Block(v, Box::new(Expr::NoneVal)),
    }
}
Statements = SeparatedLeastOne<Statement, SEMICOLON>;

FunDecl: StmtType = {
    DEF <name: Identifier> LPAREN <parameters: Parameters> RPAREN ASSIGN <body: Expr> => {
        StmtType::Function{name, parameters, body: body}
    }
}
Parameters = Separated<Identifier, COMMA>;

Conditional: Expr = {
    IF <guard: Expr> <then: Block> <els: (ELSE <Block>)?> =>
                    Expr::Conditional{guard: Box::new(guard),
                            then_branch: Box::new(then),
                            else_branch: els.map(Box::new)},
}

Return: StmtType = {
    RETURN <Expr> => StmtType::Return(<>)
}

// Macros
Separated<T, S>: Vec<T> = {
    <mut v: (<T> S)*> <e: T?> => match e {
        None => v,
        Some(e) => { v.push(e); v }
    }
}

SeparatedLeastOne<T, S>: Vec<T> = {
    <mut v: (<T> S)*> <e: T> S? => { v.push(e); v }
};
