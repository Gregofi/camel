use crate::ast::{AST, Opcode, IntoBoxed};
use crate::grammar::AST::NoneVal;
use std::collections::VecDeque;
use std::str::FromStr;

grammar;

// Lexer
match {
    r"\s*" => { },
    r"/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/|(//.*)" => { },

    // keywords
    ";" => SEMICOLON,
    "{" => OPEN,
    "}" => CLOSE,
    "||" => OR,
    "&&" => AND,
    "!=" => NEQ,
    "==" => EQ,
    ">"  => GREATER,
    "<"  => LESS,
    ">=" => GREATEREQ,
    "<=" => LESSEQ,
    "*"  => MULTIPLY,
    "/"  => DIVIDE,
    "%"  => MODULE,
    "+"  => PLUS,
    "-" => MINUS,
    "if" => IF,
    "else" => ELSE,
    "(" => LPAREN,
    ")" => RPAREN,
    "let" => LET,
    "in" => IN,
    "print" => PRINT,
    "[" => RBRACKET,
    "]" => LBRACKET,
    "true" => TRUE,
    "false" => FALSE,

    r"[_A-Za-z][_A-Za-z0-9]*" => IDENTIFIER,
    r"[-]?[0-9]+" => NUMBER,
    // TODO FLOATS
    r#""([^\\"]|\\[~ntr\\"])*""# => STRING_LITERAL,
}

pub TopLevel: AST = {
    <toplevel: TopLevelExpressions> => AST::Top(toplevel.into_boxed()),
                                    => AST::Top(vec![NoneVal.into_boxed()]),
}

TopLevelExpressions: Vec<AST> = {
    <first: TopLevelExpression> <others: (SEMICOLON <TopLevelExpression>)*> SEMICOLON? => {
        let mut all = VecDeque::from(others);
        all.push_front(first);
        Vec::from(all)
    }
}

TopLevelExpression: AST = {
    Expr => <>,
}

Expr: AST = {
    <left:Expr> <op:ExprOp> <right:Factor> => AST::Operator{op: op, arguments: vec![Box::new(left), Box::new(right)]},
    Factor,
}

Factor: AST = {
    <left:Factor> <op:TermOp> <right:Term> => AST::Operator{op: op, arguments: vec![Box::new(left), Box::new(right)]},
    Term,
}

ExprOp: Opcode = {
    PLUS => Opcode::Add,
    MINUS => Opcode::Sub,
}

TermOp: Opcode = {
    MULTIPLY => Opcode::Mul,
    DIVIDE => Opcode::Div,
}

Term: AST = {
    // TODO: floats
    Number => <>,
    LPAREN <Expr> RPAREN,
}

Number: AST = {
    NUMBER => AST::Integer(i32::from_str(<>).unwrap()),
}
