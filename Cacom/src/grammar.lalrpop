// The lexer and some of the grammar rules were inspired
// by Konrad Siek FML Language intepreter, thanks Konrad!
// https://github.com/kondziu

use crate::ast::{StmtType, Opcode, ExprType, Stmt, Expr};
use crate::utils::Location;
use std::collections::VecDeque;
use std::str::FromStr;


grammar;

// Lexer
match {
    // Comments, those we ignore
    r"\s*" => { },
    r"/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/|(//.*)" => { },

    // keywords
    ";" => SEMICOLON,
    "{" => CURLYBOPEN,
    "}" => CURLYBCLOSE,
    "||" => OR,
    "&&" => AND,
    "==" => EQ,
    "!=" => NEQ,
    "="  => ASSIGN,
    ">"  => GREATER,
    "<"  => LESS,
    ">=" => GREATEREQ,
    "<=" => LESSEQ,
    "*"  => MULTIPLY,
    "/"  => DIVIDE,
    "%"  => MODULO,
    "+"  => PLUS,
    "-" => MINUS,
    "if" => IF,
    "else" => ELSE,
    "(" => LPAREN,
    ")" => RPAREN,
    "let" => LET,
    "in" => IN,
    "[" => RBRACKET,
    "]" => LBRACKET,
    "true" => TRUE,
    "false" => FALSE,
    "def" => DEF,
    "," => COMMA,
    "." => DOT,
    "return" => RETURN,
    "class" => CLASS,

    "val" => VAL,
    "var" => VAR,

    r"[_A-Za-z][_A-Za-z0-9]*" => IDENTIFIER,
    r"[0-9]+" => NUMBER,
    // TODO FLOATS
    r#""([^\\"]|\\[~ntr\\"])*""# => STRING_LITERAL,
}

pub TopLevel: Stmt = {
    // TODO: Location 0:0 is not right
    <TopLevelExpressions> => Stmt { node: StmtType::Top(<>), location: Location(0, 0) },
                          => Stmt {
        node: StmtType::Top(vec![ Stmt { node: StmtType::Expression(Expr { node: ExprType::NoneVal, location: Location(0, 0) }), location: Location(0, 0) } ]),
        location: Location(0, 0),
    },
}

TopLevelExpressions: Vec<Stmt> = SeparatedLeastOne<TopLevelExpression, SEMICOLON>;

TopLevelExpression: Stmt = {
    // FIXME: This permits 'return' in top level
    Statement => <>,
    ClassDecl => <>,
}

// Those are 'top' level expression in block,
// do not put things that can appear in operations
// (ie. in binary operations, conditions and so on...)
// here belongs for example while or for cycle.
Statement: Stmt = {
    <l: @L> <expr: Expr> <r: @R> => Stmt {
        node: StmtType::Expression(expr),
        location: Location(l, r),
    }, // All subexpressions - contains binaryop, ifs, calls and so on.
    Return => <>,
    VarDecl => <>,
    Assignment => <>,
    FunDecl => <>,
}

ClassDecl: Stmt = {
    <l: @L> CLASS <name: Identifier> CURLYBOPEN <statements: Statements> CURLYBCLOSE <r: @R> =>  Stmt {
        node: StmtType::Class { name, statements },
        location: Location(l, r),
    }
}

Assignment: Stmt = {
    <l: @L> <name: Identifier> ASSIGN <value: Expr> <r: @R> => Stmt {
        node: StmtType::AssignVariable { name, value },
        location: Location(l, r),
    },
    <l: @L> <left: Term> DOT <right: Identifier> ASSIGN <val: Expr> <r: @R> => Stmt {
        node: StmtType::MemberStore { left, right, val },
        location: Location(l, r),
    },
}

VarDecl: Stmt = {
    <l: @L> VAL <name: Identifier> ASSIGN <value: Expr> <r: @R> => Stmt {
        node: StmtType::Variable { name, mutable: false, value },
        location: Location(l, r),
    },
    <l: @L> VAR <name: Identifier> ASSIGN <value: Expr> <r: @R> => Stmt {
        node: StmtType::Variable { name, mutable: true, value },
        location: Location(l, r),
    }
}

LeftAssoc<Op, NextLevel>: Expr = {
    <l: @L> <left: LeftAssoc<Op, NextLevel>> <op: Op> <right: NextLevel> <r: @R> => Expr {
        node: ExprType::Operator{ op, arguments: vec![left, right] },
        location: Location(l, r),
    },
    NextLevel,
}

Unary<Op, NextLevel>: Expr = {
    <l: @L> <op: Op> <arg: Unary<Op, NextLevel>> <r: @R> => Expr {
        node: ExprType::Operator{ op, arguments: vec![arg] },
        location: Location(l, r),
    },
    NextLevel,
}

Expr = LeftAssoc<LogicalOp, AExpr>;

LogicalOp: Opcode = {
    LESS => Opcode::Less,
    LESSEQ => Opcode::LessEq,
    GREATER => Opcode::Greater,
    GREATEREQ => Opcode::GreaterEq,
    EQ => Opcode::Eq,
    NEQ => Opcode::Neq,
}

AExpr = LeftAssoc<ExprOp, Factor>;

ExprOp: Opcode = {
    PLUS => Opcode::Add,
    MINUS => Opcode::Sub,
}

Factor: Expr = {
    <LeftAssoc<TermOp, Term>> => <>,
}

TermOp: Opcode = {
    MULTIPLY => Opcode::Mul,
    DIVIDE => Opcode::Div,
    MODULO => Opcode::Mod,
}

Term: Expr = {
    <Unary<UnaryOp, Primary>> => <>,
    <l: @L> <p: Term> DOT <i: Identifier> <r: @R> => Expr {
        node: ExprType::MemberRead { left: Box::new(p), right: i }, 
        location: Location(l, r)
    },
    <l: @L> <p: Term> DOT <name: Identifier> LPAREN <arguments: Arguments> RPAREN <r: @R> => Expr {
        node: ExprType::MethodCall { left: Box::new(p), name, arguments }, 
        location: Location(l, r)
    },
}

UnaryOp: Opcode = {
    MINUS => Opcode::Negate,
}

Primary: Expr = {
    <l: @L> TRUE <r: @R> => Expr {
        node: ExprType::Bool(true),
        location: Location(l, r)
    },
    <l: @L> FALSE <r: @R> => Expr {
        node: ExprType::Bool(false),
        location: Location(l, r)
    },
    <Number> => <>,
    <l: @L> <str: String> <r: @R> => Expr {
        node: ExprType::String(str),
        location: Location(l, r)
    },
    <Call> => <>,
    // TODO: Does not capture location
    <l: @L> LPAREN <expr: Expr> RPAREN <r: @R> => expr,
    <Block> => <>,
    <Conditional> => <>,
    <l: @L> <name: Identifier> <r: @R> => Expr {
        node: ExprType::AccessVariable{name},
        location: Location(l, r)
    },
}

Call: Expr = {
    <l: @L> <function: Identifier> LPAREN <arguments: Arguments> RPAREN <r: @R> => {
        Expr {
            node: ExprType::CallFunction{ name: function, arguments: arguments },
            location: Location(l, r),
        }
    }
    // TODO: Method calls over objects, lists, strings and so on.
}

Arguments = Separated<Expr, COMMA>;

Identifier: String = IDENTIFIER => <>.to_string();

Number: Expr = {
    <l: @L> <n: NUMBER> <r: @R> => Expr {
        node: ExprType::Integer(i32::from_str(n).unwrap()),
        location: Location(l, r)
    },
}

String: String = {
    <s:STRING_LITERAL> => s[1..s.len()-1].to_string(),
}

Block: Expr = {
    <l: @L> CURLYBOPEN <v: (<Statement> SEMICOLON)*> <e: Expr?> CURLYBCLOSE <r: @R> => {
        Expr {
            node: ExprType::Block(v, match e {
                Some(expr) => Box::new(expr),
                None => Box::new(Expr { node: ExprType::NoneVal, location: Location(l, r) } )
            }),
            location: Location(l, r),
        }
    }
}

Statements = Separated<Statement, SEMICOLON>;

FunDecl: Stmt = {
    <l: @L> DEF <name: Identifier> LPAREN <parameters: Parameters> RPAREN ASSIGN <body: Expr> <r: @R> => Stmt {
        node: StmtType::Function{name, parameters, body: body},
        location: Location(l, r),
    }
}

Parameters = Separated<Identifier, COMMA>;

Conditional: Expr = {
    <l: @L> IF <guard: Expr> <then: Block> <els: (ELSE <Block>)?> <r: @R> => Expr {
        node: ExprType::Conditional{guard: Box::new(guard),
                then_branch: Box::new(then),
                else_branch: els.map(Box::new)},
        location: Location(l, r),
    }
}

Return: Stmt = {
    <l: @L> RETURN <e: Expr> <r: @R> => Stmt {
        node: StmtType::Return(e),
        location: Location(l, r),
    }
}

// Macros
Separated<T, S>: Vec<T> = {
    <mut v: (<T> S)*> <e: T?> => match e {
        None => v,
        Some(e) => { v.push(e); v }
    }
}

SeparatedLeastOne<T, S>: Vec<T> = {
    <mut v: (<T> S)*> <e: T> S? => { v.push(e); v }
};
